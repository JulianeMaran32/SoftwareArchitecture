# docker-compose.yml
version: '3.8'

services:
  # Elasticsearch: Armazena projeções e logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - stock-net
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=yellow || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Kibana: Visualização dos dados do Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - stock-net

  # Logstash: Coleta, processa e envia logs para o Elasticsearch
  logstash:
    build:
      context: .
      dockerfile: Dockerfile.logstash
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      # Monta o mesmo volume de logs da aplicação, mas como somente leitura
      - ./logs:/usr/share/logstash/app-logs:ro
    networks:
      - stock-net

  # PostgreSQL: Nosso Event Store
  postgres:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: eventstore
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - stock-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d eventstore"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Sua aplicação Spring Boot
  stock-app:
    build: . # Usa o Dockerfile na raiz do projeto
    container_name: stock_app
    ports:
      - "8081:8081"
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy # Espera o Postgres estar saudável
    environment:
      # Use 'prod' para conectar no Postgres. Use 'dev' para H2.
      - SPRING_PROFILES_ACTIVE=prod
      # Garante que a app se conecte aos containers pelos nomes de serviço
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/eventstore
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
    volumes:
      # Mapeia o diretório de logs para o host, para o Logstash poder acessá-lo
      - ./logs:/app/logs
    networks:
      - stock-net

networks:
  stock-net:
    driver: bridge

volumes:
  elastic_data:
  postgres_data: